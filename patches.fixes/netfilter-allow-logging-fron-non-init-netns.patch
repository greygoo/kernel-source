From: Michal Kubecek <mkubecek@suse.cz>
Date: Tue, 5 Apr 2016 14:24:11 +0200
Subject: netfilter: allow logging fron non-init netns
Patch-mainline: v4.11-rc1
Git-commit: 2851940ffee313e0ff12540a8e11a8c54dea9c65
References: bsc#970083

Since commit 69b34fb996b2 ("netfilter: xt_LOG: add net namespace support
for xt_LOG") netfilter log entries from network namespaces other than
init_net are silently ignored. This is supposed to prevent containers
from flooding host kernel log but admins may want to allow logging from
all netns anyway.

Add /proc/sys/net/netfilter/nf_log_all_netns sysctl to allow xt_LOG
module to log from all namespaces.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>

---
 Documentation/networking/netfilter-sysctl.txt | 10 +++++++++
 net/netfilter/xt_LOG.c                        | 30 +++++++++++++++++++++++++--
 2 files changed, 38 insertions(+), 2 deletions(-)
 create mode 100644 Documentation/networking/netfilter-sysctl.txt

diff --git a/Documentation/networking/netfilter-sysctl.txt b/Documentation/networking/netfilter-sysctl.txt
new file mode 100644
index 000000000000..55791e50e169
--- /dev/null
+++ b/Documentation/networking/netfilter-sysctl.txt
@@ -0,0 +1,10 @@
+/proc/sys/net/netfilter/* Variables:
+
+nf_log_all_netns - BOOLEAN
+	0 - disabled (default)
+	not 0 - enabled
+
+	By default, only init_net namespace can log packets into kernel log
+	with LOG target; this aims to prevent containers from flooding host
+	kernel log. If enabled, this target also works in other network
+	namespaces. This variable is only accessible from init_net.
diff --git a/net/netfilter/xt_LOG.c b/net/netfilter/xt_LOG.c
index 5ab24843370a..00113f2821bb 100644
--- a/net/netfilter/xt_LOG.c
+++ b/net/netfilter/xt_LOG.c
@@ -29,6 +29,8 @@
 #include <net/netfilter/nf_log.h>
 #include <net/netfilter/xt_log.h>
 
+static int sysctl_nf_log_all_netns __read_mostly;
+
 static struct nf_loginfo default_loginfo = {
 	.type	= NF_LOG_TYPE_LOG,
 	.u = {
@@ -478,7 +480,7 @@ ipt_log_packet(struct net *net,
 	struct sbuff *m;
 
 	/* FIXME: Disabled from containers until syslog ns is supported */
-	if (!net_eq(net, &init_net))
+	if (!net_eq(net, &init_net) && !sysctl_nf_log_all_netns)
 		return;
 
 	m = sb_open();
@@ -809,7 +811,7 @@ ip6t_log_packet(struct net *net,
 	struct sbuff *m;
 
 	/* FIXME: Disabled from containers until syslog ns is supported */
-	if (!net_eq(net, &init_net))
+	if (!net_eq(net, &init_net) && !sysctl_nf_log_all_netns)
 		return;
 
 	m = sb_open();
@@ -908,17 +910,41 @@ static struct nf_logger ip6t_log_logger __read_mostly = {
 };
 #endif
 
+#ifdef CONFIG_SYSCTL
+static struct ctl_table nf_log_sysctl_ftable[] = {
+	{
+		.procname	= "nf_log_all_netns",
+		.data		= &sysctl_nf_log_all_netns,
+		.maxlen		= sizeof(sysctl_nf_log_all_netns),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec,
+	},
+	{ }
+};
+
+static struct ctl_table_header *nf_log_sysctl_fhdr;
+#endif
+
 static int __net_init log_net_init(struct net *net)
 {
 	nf_log_set(net, NFPROTO_IPV4, &ipt_log_logger);
 #if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)
 	nf_log_set(net, NFPROTO_IPV6, &ip6t_log_logger);
 #endif
+#ifdef CONFIG_SYSCTL
+	if (net_eq(net, &init_net))
+		nf_log_sysctl_fhdr = register_net_sysctl(net, "net/netfilter",
+							 nf_log_sysctl_ftable);
+#endif
 	return 0;
 }
 
 static void __net_exit log_net_exit(struct net *net)
 {
+#ifdef CONFIG_SYSCTL
+	if (nf_log_sysctl_fhdr)
+		unregister_sysctl_table(nf_log_sysctl_fhdr);
+#endif
 	nf_log_unset(net, &ipt_log_logger);
 #if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)
 	nf_log_unset(net, &ip6t_log_logger);
-- 
2.12.2

